single Source of truth:
    -the globle state of your application is store in an object tree within a single store

State is read only :

    the only way to change the state is to emit an action abject describing what happend


Change are made with pure functions
    -to specify how the state tree is transfored by actions you write pure deducrs 


  event habdler(Dispath)   ---> Store<state>
            ^                     
            |                     |
            -----<    UI    <-----



#reduser 

    -it is an pure functions that recives the previou state and action from
    and returen a new state
        - we have to create and  return a completely new stat withou changig the 
        previous state

    -pure function
        - returen the same output when given the same input
        - must not contain side effects


redux keeps the app state in one place 
you must update the app state only in the presribed way


means- a rule, guide, or course of action that has been set down, or a way that conforms to a set usage, procedure, or discipline



core packges : --
                redux 
                flutter_redux
                redux_thunk


                redux:
                    -a core library that allow you to mange and update the centrlized
                    app state using event called actions
                
                flutter_redux: : 
                    - a set of utility that makes it easy to use the redyx store to byukd flutter widgets

                redux_thunk: 
                    - a packges that makes it easy for your reduX app to handle async opreations that are almost always included in mider apps




State :
    - the state can be any value 
        -like prmitive type :string ,int 
        - or we defined class

    Use class-type state whenever it possible


Action:
    action due to that it will resion state will we change
    type +Payload
    type:it is type of action to to describing the action are which type 
    paylaod :it is the adition data required to peform the action 



Reduser 

    -it is pure function that takes two arguments
    and computes a new state

    this funtin take the tow arguments that is 
        1 current state 
        2 action 

           depedend on 
             that 
              it


            new state
            is defined
            
             
    


Store 
    - it hold the app stat tree
    it is the class having two requird arguments: 
        1 reduser  //this is positinal 
        2 intial state  //this named 

    it it has on optinal importante argument aslo called as
        3 middleware  //this is also named but it is optional 



////////////////////////////////////////////////////////////////


flutter_redux packge:

    - A Set of utilitues that allow you to easilyconsume a redux store 
    to build flutter widget 

    - react-redux pakage in react



Dependancer enjection :
    it is nothing but passing the data that is store in wedget tree so it is so easy 
    to to that flutter redux hase StoreProvider widgets
    it hase to requred argument one is 
        strore 
        child

    
StoreProvider
    it provide a redux store to all descndants of storePRovider widget
        - in ordr to be able to user store injection by storePRovidr in the entire widget three
        Material must be wrapped in StoreProvider

            -- StoreProvider( 
                store:store,
                child :MaterialApp()
            )


it hase other widget or builders lilke:
    1StroeBuilder
    2StoreConnecttor: it is like consumer in StoreProvider
    2StoreProvider 
    
by this above way the dependcey injection part in redux or flutter is resolve



//StoreBuilder:
    build a widget by passing the store directly to the build function
        storeBuilder is not recommeded for use exept for very simple apps that do not 
        requied perfomance optimization
            every time the store change the widget will be rebuilt
        
        Generally it is consided best practice to use storeConnector and to buil a viewModel specifically for your widget rathe than passing through the entire store


            viewModel: it an object with data and method neceesry to build UI
            
        but this is provided for conveniece when that isnt neccerry


    eg:

        @Widget build(BuildContext context){

            return StoreBuilder<CounterState>(

                store:store,
                builder:(BuildContext context ,Store<CounterState> store){ 
                    return Scaffold( 

                        body: Column( 

                            children:[ 

                                Text( 
                                    "$store.state.counter" ,
                                )
                            ]
                        )

                        floatingAcionBotton:ElivatedButton( 
                            child:Text("Icreement count")
                            onTap:(){
                                store.dispathc(IncrementAction(payload:2));
                            }
                        )
                    );

                }
            );
        }






//StoreConnector:

    -it is similar toStoreBuilder bu with finer graine control
        -storeBuilder :Store
        -StoreConnector :viewModel

            - viewModel :an object with data and methods are necessery to build UI
            - we need to implemet converter callback that converts store to viewmodel

    -perfomance Optimization:

        needs extr work so that the widget can  rebuild only when the viewmodel changes 
            - need to override equality oprator(==) and hashcodes
            -set distict option to ture
